package model.eo;

import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Aug 30 17:08:43 IST 2020
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class EmpImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    @Override
    public void remove() {
//        super.remove();
        System.out.print("we dont't allow to remove Employees");
    }

    /**
     * Validation method for Ename.
     */
    public boolean validateEname(String ename) {
        if(ename.endsWith("afsar")){
            return false;
        }
        return true;
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Empno {
            public Object get(EmpImpl obj) {
                return obj.getEmpno();
            }

            public void put(EmpImpl obj, Object value) {
                obj.setEmpno((Number)value);
            }
        }
        ,
        Ename {
            public Object get(EmpImpl obj) {
                return obj.getEname();
            }

            public void put(EmpImpl obj, Object value) {
                obj.setEname((String)value);
            }
        }
        ,
        Job {
            public Object get(EmpImpl obj) {
                return obj.getJob();
            }

            public void put(EmpImpl obj, Object value) {
                obj.setJob((String)value);
            }
        }
        ,
        Mgr {
            public Object get(EmpImpl obj) {
                return obj.getMgr();
            }

            public void put(EmpImpl obj, Object value) {
                obj.setMgr((Number)value);
            }
        }
        ,
        Hiredate {
            public Object get(EmpImpl obj) {
                return obj.getHiredate();
            }

            public void put(EmpImpl obj, Object value) {
                obj.setHiredate((Date)value);
            }
        }
        ,
        Sal {
            public Object get(EmpImpl obj) {
                return obj.getSal();
            }

            public void put(EmpImpl obj, Object value) {
                obj.setSal((Number)value);
            }
        }
        ,
        Comm {
            public Object get(EmpImpl obj) {
                return obj.getComm();
            }

            public void put(EmpImpl obj, Object value) {
                obj.setComm((Number)value);
            }
        }
        ,
        Deptno {
            public Object get(EmpImpl obj) {
                return obj.getDeptno();
            }

            public void put(EmpImpl obj, Object value) {
                obj.setDeptno((Number)value);
            }
        }
        ,
        Dept {
            public Object get(EmpImpl obj) {
                return obj.getDept();
            }

            public void put(EmpImpl obj, Object value) {
                obj.setDept((EntityImpl)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(EmpImpl object);

        public abstract void put(EmpImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int EMPNO = AttributesEnum.Empno.index();
    public static final int ENAME = AttributesEnum.Ename.index();
    public static final int JOB = AttributesEnum.Job.index();
    public static final int MGR = AttributesEnum.Mgr.index();
    public static final int HIREDATE = AttributesEnum.Hiredate.index();
    public static final int SAL = AttributesEnum.Sal.index();
    public static final int COMM = AttributesEnum.Comm.index();
    public static final int DEPTNO = AttributesEnum.Deptno.index();
    public static final int DEPT = AttributesEnum.Dept.index();

    /**
     * This is the default constructor (do not remove).
     */
    public EmpImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("model.eo.Emp");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for Empno, using the alias name Empno.
     * @return the Empno
     */
    public Number getEmpno() {
        return (Number)getAttributeInternal(EMPNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for Empno.
     * @param value value to set the Empno
     */
    public void setEmpno(Number value) {
        setAttributeInternal(EMPNO, value);
    }

    /**
     * Gets the attribute value for Ename, using the alias name Ename.
     * @return the Ename
     */
    public String getEname() {
        return (String)getAttributeInternal(ENAME) + " Afsar";
    }

    /**
     * Sets <code>value</code> as the attribute value for Ename.
     * @param value value to set the Ename
     */
    public void setEname(String value) {
        setAttributeInternal(ENAME, value);
    }

    /**
     * Gets the attribute value for Job, using the alias name Job.
     * @return the Job
     */
    public String getJob() {
        return (String)getAttributeInternal(JOB);
    }

    /**
     * Sets <code>value</code> as the attribute value for Job.
     * @param value value to set the Job
     */
    public void setJob(String value) {
        setAttributeInternal(JOB, value);
    }

    /**
     * Gets the attribute value for Mgr, using the alias name Mgr.
     * @return the Mgr
     */
    public Number getMgr() {
        return (Number)getAttributeInternal(MGR);
    }

    /**
     * Sets <code>value</code> as the attribute value for Mgr.
     * @param value value to set the Mgr
     */
    public void setMgr(Number value) {
        setAttributeInternal(MGR, value);
    }

    /**
     * Gets the attribute value for Hiredate, using the alias name Hiredate.
     * @return the Hiredate
     */
    public Date getHiredate() {
        return (Date)getAttributeInternal(HIREDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Hiredate.
     * @param value value to set the Hiredate
     */
    public void setHiredate(Date value) {
        setAttributeInternal(HIREDATE, value);
    }

    /**
     * Gets the attribute value for Sal, using the alias name Sal.
     * @return the Sal
     */
    public Number getSal() {
        return (Number)getAttributeInternal(SAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for Sal.
     * @param value value to set the Sal
     */
    public void setSal(Number value) {
        setAttributeInternal(SAL, value);
    }

    /**
     * Gets the attribute value for Comm, using the alias name Comm.
     * @return the Comm
     */
    public Number getComm() {
        return (Number)getAttributeInternal(COMM);
    }

    /**
     * Sets <code>value</code> as the attribute value for Comm.
     * @param value value to set the Comm
     */
    public void setComm(Number value) {
        setAttributeInternal(COMM, value);
    }

    /**
     * Gets the attribute value for Deptno, using the alias name Deptno.
     * @return the Deptno
     */
    public Number getDeptno() {
        return (Number)getAttributeInternal(DEPTNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for Deptno.
     * @param value value to set the Deptno
     */
    public void setDeptno(Number value) {
        setAttributeInternal(DEPTNO, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getDept() {
        return (EntityImpl)getAttributeInternal(DEPT);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setDept(EntityImpl value) {
        setAttributeInternal(DEPT, value);
    }

    /**
     * @param empno key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number empno) {
        return new Key(new Object[]{empno});
    }


}
